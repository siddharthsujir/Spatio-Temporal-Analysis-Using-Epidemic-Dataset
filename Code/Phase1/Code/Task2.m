% Deletes if the file already exists
clc;
delete('epidemic_word_file_avg.csv');
delete('epidemic_word_file_diff.csv');

% Reads the word file generated by the previous program
[num,str,other]=xlsread('epidemic_word_file.csv');
alpha=input('Enter the value of alpha: ');
count=numel(other);

% Assign variables for each columns of the epidemic_word_file
strarr=1:count;
for i=1:1:count             
  strarr=strsplit(char(other(i)),' ');
  [a,b]=size(strarr);
     f(i)=strarr(1,1);
   state_arr(i)=strarr(1,2);
   time_arr(i)=strcat(strarr(1,3),strarr(1,4));
  win3(i,:)=str2num(char(strarr(1,5:b)));
end

% Reads the Connectivity Matrix
[loc_mat,str,o]=xlsread('C:\Users\siddhu\Documents\1st semester\MWDB\Project\sampledata_P1_F14\sampledata_P1_F14\Graphs\LocationMatrix.xlsx');
[row,col]=size(str);
%To get the names of each state in the connectivity matrix
st2=str(2:row,1:1);
st3=str(1:1,2:col);
%Create two file for values of average and difference
f_avg=fopen('epidemic_word_file_avg.csv','w');
f_diff=fopen('epidemic_word_file_diff.csv','w');

for i=1:1:count
    win_sum=0;
    indexi=0;
    indexj=0;
    num=0;
    flag=0;
    [a,ind]=ismember(state_arr(i),st3);
    % Find the one hop neighbour of state i
    one_hop_st=find(loc_mat(ind,:)==1);
    % to check if the state has a neighbour
  if(isempty(one_hop_st)==0)
   for j=1:1:numel(one_hop_st)
       st=st3(one_hop_st(j));
       
       st_arr=find(ismember(state_arr,st)==1);
     for k=1:numel(st_arr)
       % To check if the state at position st_arr has the same time as state i
             if(isequal(char(time_arr(i)),char(time_arr(st_arr(k))))==1)
        % To Check if the state at position st_arr has the same file name
        % as state i
               if( isequal(char(f(i)),char(f(st_arr(k))))==1)
         % compute the sum of win vector of all the neighbouring states
                win_sum=win_sum+win3(j,:);
                     num=num+1;  
              
               end
            end
        
     end
      % Calculate the average of win vector
           win_avg(i,:)=(alpha*win3(i,:))+((1-alpha)*(win_sum/num));
           win_diff(i,:)=(win3(i,:)-(win_sum/num))./win3(i,:);
             win_a=num2str(win_avg(i,:));
          win_d=num2str(win_avg(i,:));
         
   end
  % If the state i has no neighbours then the sum of win vectors of the
  % neighbouring states is assumed to be 0
  else
           win_avg(i,:)=alpha*win3(i,:);
           win_diff(i,:)=win3(i,:)./win3(i,:);
            win_a=num2str(win_avg(i,:));
          win_d=num2str(win_diff(i,:));

  end
  
 % print the values to the output files.
                fprintf(f_avg,'%5s %2s %s %s ',f{i},state_arr{i},time_arr{i},win_a);

            
            fprintf(f_avg,'\n');
 
             fprintf(f_diff,'%5s %2s %s %s ',f{i},state_arr{i},time_arr{i},win_d);
             fprintf(f_diff,'\n');
end

 fclose(f_avg);
 fclose(f_diff);


